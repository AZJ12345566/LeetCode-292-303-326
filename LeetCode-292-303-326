class Solution {
/*
292.Nim游戏
你和你的朋友，两个人一起玩 Nim 游戏：
桌子上有一堆石头。
你们轮流进行自己的回合， 你作为先手 。
每一回合，轮到的人拿掉 1 - 3 块石头。
拿掉最后一块石头的人就是获胜者。
假设你们每一步都是最优解。请编写一个函数，来判断你是否可以在给定石头数量为 n 的情况下赢得游戏。如果可以赢，返回 true；否则，返回 false 。
*/
  public boolean canWinNim(int n) {
    return n % 4 != 0;
  }
/*
303.区域和检索-数组不可变
给定一个整数数组  nums，处理以下类型的多个查询:
计算索引 left 和 right （包含 left 和 right）之间的 nums 元素的 和 ，其中 left <= right
实现 NumArray 类：
NumArray(int[] nums) 使用数组 nums 初始化对象
int sumRange(int i, int j) 返回数组 nums 中索引 left 和 right 之间的元素的 总和 ，包含 left 和 right 两点（也就是 nums[left] + nums[left + 1] + ... + nums[right] )
*/
  int[] sums;
  public NumArray(int[] nums) {
    int n = nums.length;
    sums = new int[n + 1];
    for(int i = 0; i < n; i++) {
      sums[i + 1] = sums[i] + nums[i];
    }
  }
  public int sumRange(int left, int right) {
    return sums[right + 1] - sums[left];
  }
/*
326.3的幂
给定一个整数，写一个函数来判断它是否是 3 的幂次方。如果是，返回 true ；否则，返回 false 。
整数 n 是 3 的幂次方需满足：存在整数 x 使得 n == 3x
*/
  public boolean isPowerOfThree(int n) {
    while(n > 0 && n % 3 == 0) {
      n /= 3;
    }
    return n == 1;
  }
}
